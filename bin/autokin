#!/usr/bin/env node

// Autokin - Runner
// Copyright 2018 Aries Beltran <ariesbe@icloud.com>
// Licensed under the MIT license. See LICENSE.
const program = require('commander');
const path = require('path');
const fs = require('fs');
const package = require(path.resolve(__dirname, '../package.json'));
const { exec } = require('child_process');
const semver = require('semver');
const colors = require('chalk');
const Table = require('cli-table3');

// check current published version
let latestVersion = undefined;
exec('npm show autokin version', async (_error, stdout, _stderr) => {
    latestVersion = stdout.replace(/\n/, '');
});

process.on('exit', () => {
    if (latestVersion && semver.gt(latestVersion, package.version))  {
        const _version = `New version available: ${colors.yellow.bold.underline(latestVersion)}`;
        const _update = `Update now: ${colors.white.bold('npm install autokin')}.`;
        let newVersionTable = new Table();
        newVersionTable.push(
            [_version],
            [_update]
        );
        process.stdout.write('\n\n' + newVersionTable.toString() + '\n\n');
    }
});

program
    .version(package.version)
    .option('-i, --init', 'Initialised new Autokin project structure')
    .option('-e, --exec', 'Execute automation test')
    .option('-s, --specs [path]', 'Specify where features are located')
    .option('-t, --tags [tags]', 'Use with --exec to specify which tags to run, example:"@autokin"')
    .option('-j, --junit', 'Output result as JUnit format')
    .option('-d, --time', 'Display duration execution for each steps')
    .option('-f, --formatter [cucumber-formatter]', 'Use with --exec to specify custom formatter')
    .option('-v, --variables [file-path]', 'Use with --exec to specify variable set from json file')
    .option('-w, --html [file-path]', 'Generate test result in html file')
    .option('-c, --clean', 'Deletes existing reports and snapshots before running new test.')
    .option('-x, --ci', 'Run on CI Environment.')
    .parse(process.argv);

let clean = (folder) => {
    if (fs.existsSync(folder)) {
        fs.readdirSync(folder).forEach(function (item) {
            const file = path.join(folder, item);
            if (fs.lstatSync(file).isDirectory()) {
                clean(file);
            } else {
                fs.unlinkSync(file);
            }
        });
        fs.rmdirSync(folder);
    }
};

if (program.clean) clean('reports');

if (program.init) {
    require('./autokin-init').default();
} else if (program.exec) {
    require('./autokin-cli')
        .default(program)
        .then((code) => {
            process.exit(code)
        }, () => {
            process.exit(1);
        });
} else {
    program.outputHelp();
}